The ``100-matrix_mul`` module
===============================

Using ``matrix_mul`` function
---------------------------------

Import ``matrix_mul`` from ``100-matrix_mul``

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Now use it:

Checks for incomplete arguments
===============================

::

	>>> matrix_mul([[]]) 	#doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 1 required positional argument:
	 'm_b'

	>>> matrix_mul()	#doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 2 required positional arguments:
	 'm_a' and 'm_b'


Check that `m_a` and `m_b` are lists
====================================

::

	>>> matrix_mul(2, [[1, 2]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list

	>>> matrix_mul([[1, 2]], 'a')
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list


Check that `m_a` and `m_b` are list of lists
============================================

::

	>>> matrix_mul([1, 2, 3], [[1, 2]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists

	>>> matrix_mul([[1, 2]], [{'a': 1, 'b': 2}])
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists


Check that outter list is not empty
===================================
::

	>>> matrix_mul([], [[1, 2]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> matrix_mul([[1, 2]], [])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty


Check that inner lists are not empty
====================================

::

	>>> matrix_mul([[]], [[1, 2]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> matrix_mul([[1, 2]], [[]])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty


Check that lists contains only integers and floats
==================================================

::

	>>> matrix_mul([[1.0, 2.0], [3.0, 'b']], [[1.0, 2.0]])
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[1, 2.0], [3.0, 4]], [[1, 2], [3, [1, 2]]])
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats


Check that each row in `m_a` and `m_b` are same size
====================================================

::

	>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size


Check that `m_a` and `m_b` can be multiplied
============================================

::

	>>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22], [23, 34]]

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied

	>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied


Validate on valid integer values
================================

::

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	[[13, 16]]

	>>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
	[[19, 22, 5], [43, 50, 11], [43, 50, 11]]

End of Test
