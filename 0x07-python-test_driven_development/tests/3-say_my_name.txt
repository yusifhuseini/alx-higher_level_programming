The ``3-say_my_name`` module
============================

Using ``say_my_name`` function
------------------------------

Import ``say_my_name`` from ``3-say_my_name``

	>>> say_my_name = __import__('3-say_my_name').say_my_name

Now use it:

Checks for no arguments
=======================

::

	>>> say_my_name()	#doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
		...
	TypeError: say_my_name() missing 1 required positional argument:
	 'first_name'
	


TypeError checks
================

::

	>>> say_my_name([])
	Traceback (most recent call last):
		...
	TypeError: first_name must be a string

	>>> say_my_name(1.33)
	Traceback (most recent call last):
		...
	TypeError: first_name must be a string

	>>> say_my_name("", [])
	Traceback (most recent call last):
		...
	TypeError: last_name must be a string

	>>> say_my_name('', 12)
	Traceback (most recent call last):
		...
	TypeError: last_name must be a string

	>>> say_my_name((), {})
	Traceback (most recent call last):
		...
	TypeError: first_name must be a string


Checks with a single valid argument
===================================

::

	>>> say_my_name('Bob')
	My name is Bob 


Checks with two non-empty valid arguments
=========================================

::

	>>> say_my_name('Walter', 'White')
	My name is Walter White


Checks with empty string argument(s)
=======================================

	>>> say_my_name("")
	My name is  

	>>> say_my_name("", "Smith")
	My name is  Smith

	>>> say_my_name(first_name="", last_name="")
	My name is  

End tests
